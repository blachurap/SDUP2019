/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xaxidma.h"
#include "dma_passthrough.h"

// Defines
#define SAMPLES_PER_FRAME  1
XAxiDma dma_inst;

static void s2mm_isr(void* CallbackRef)
{

	// Local variables
	u32      irq_status;
	int      time_out;
	XAxiDma* p_dma_inst = (XAxiDma*)CallbackRef;

	// Disable interrupts
	XAxiDma_IntrDisable(p_dma_inst, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrDisable(p_dma_inst, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);

	// Read pending interrupts
	irq_status = XAxiDma_IntrGetIrq(p_dma_inst, XAXIDMA_DEVICE_TO_DMA);

	// Acknowledge pending interrupts
	XAxiDma_IntrAckIrq(p_dma_inst, irq_status, XAXIDMA_DEVICE_TO_DMA);

	// If no interrupt is asserted, we do not do anything
	if (!(irq_status & XAXIDMA_IRQ_ALL_MASK))
		return;

	// If error interrupt is asserted, raise error flag, reset the
	// hardware to recover from the error, and return with no further
	// processing.
	if ((irq_status & XAXIDMA_IRQ_ERROR_MASK))
	{

		g_dma_err = 1;

		// Reset should never fail for transmit channel
		XAxiDma_Reset(p_dma_inst);

		time_out = RESET_TIMEOUT_COUNTER;
		while (time_out)
		{
			if (XAxiDma_ResetIsDone(p_dma_inst))
				break;

			time_out -= 1;
		}

		return;
	}

	// Completion interrupt asserted
	if (irq_status & XAXIDMA_IRQ_IOC_MASK)
		g_s2mm_done = 1;

	// Re-enable interrupts
	XAxiDma_IntrEnable(p_dma_inst, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DMA_TO_DEVICE);
	XAxiDma_IntrEnable(p_dma_inst, (XAXIDMA_IRQ_IOC_MASK | XAXIDMA_IRQ_ERROR_MASK), XAXIDMA_DEVICE_TO_DMA);

}

int main()
{
	/* Zmienne lokalne */
	int 		status;
	uint16_t     rcv_buf[SAMPLES_PER_FRAME] = {10};
	uint8_t     snd_buf[SAMPLES_PER_FRAME] = {16};
	/* */
	XAxiDma_Config* cfg_ptr;
	XAxiDma* p_dma_inst = &dma_inst;

	// Look up hardware configuration for device
	cfg_ptr = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	if (!cfg_ptr)
	{
		xil_printf("ERROR! No hardware configuration found for AXI DMA with device id %d.\r\n", XPAR_AXIDMA_0_DEVICE_ID);
		return DMA_PASSTHROUGH_DMA_INIT_FAIL;
	}

	// Initialize driver
	status = XAxiDma_CfgInitialize(p_dma_inst, cfg_ptr);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Initialization of AXI DMA failed with %d\r\n", status);
		return DMA_PASSTHROUGH_DMA_INIT_FAIL;
	}

	// Test for Scatter Gather
	if (XAxiDma_HasSg(p_dma_inst))
	{
		xil_printf("ERROR! Device configured as SG mode.\r\n");
		return DMA_PASSTHROUGH_DMA_INIT_FAIL;
	}

	// Disable interrupts for both channels
	XAxiDma_IntrDisable(p_dma_inst, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(p_dma_inst, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	// Reset DMA
	XAxiDma_Reset(p_dma_inst);
	while (!XAxiDma_ResetIsDone(p_dma_inst)) {}
//	dma_passthrough_t* p_dma_passthrough_inst;

//	p_dma_passthrough_inst = dma_passthrough_create(XPAR_AXIDMA_0_DEVICE_ID, 1);

	init_platform();

	/* SprawdŸ, czy obiekt stworzono */
//	if (p_dma_passthrough_inst == NULL)
//	{
//		xil_printf("ERROR! Failed to create DMA Passthrough object for use by the huffman coder.\n\r");
//	}

	/* Ustaw iloœæ bajtów na jeden transfer */
//	dma_passthrough_set_buf_length(p_dma_passthrough_inst, SAMPLES_PER_FRAME);
//	dma_passthrough_set_sample_size_bytes(p_dma_passthrough_inst, 1);

	// Make sure the buffers are clear before we populate it (generally don't need to do this, but for proving the DMA working, we do it anyway)
//	memset(rcv_buf, 0, SAMPLES_PER_FRAME);
//	memset(snd_buf, 0, SAMPLES_PER_FRAME);

//	dma_passthrough_reset(p_dma_passthrough_inst);

	print("Hello General\n\r");
	// Process data
	xil_printf("Starting data processing...\n\r");

	/* Wysy³anie */
	for (int k = 0; k <5; k++)
	{
		status = XAxiDma_SimpleTransfer(p_dma_inst, (UINTPTR)snd_buf, 8, XAXIDMA_DMA_TO_DEVICE);
		if (status != XST_SUCCESS) {
			print("Error wysylanie");
		}
	}

//	dma_passthrough_set_snd_buf(p_dma_passthrough_inst, snd_buf);
//	status = dma_passthrough_snd(p_dma_passthrough_inst);
//	if (status != DMA_PASSTHROUGH_SUCCESS)
//	{
//		xil_printf("ERROR! DMA Passthrough error occurred when trying to send data.\n\r");
//	}
	print("Wys³ano!");
	/* Odczytywanie */
	status = XAxiDma_SimpleTransfer(p_dma_inst, (UINTPTR)rcv_buf, 16, XAXIDMA_DEVICE_TO_DMA);
	if (status != XST_SUCCESS) {
		print("Error odbieranie");
	}
//	while ((XAxiDma_Busy(p_dma_inst,XAXIDMA_DEVICE_TO_DMA)) ||
//		(XAxiDma_Busy(p_dma_inst,XAXIDMA_DMA_TO_DEVICE))) {
//			/* Wait */
//	}
//	dma_passthrough_set_rcv_buf(p_dma_passthrough_inst,rcv_buf);
//	status = dma_passthrough_rcv(p_dma_passthrough_inst);
//	if (status != DMA_PASSTHROUGH_SUCCESS)
//	{
//		xil_printf("ERROR! DMA Passthrough error occurred when trying to get data.\n\r");
//	}
	print("Odebrano!\n\r");

	outbyte(snd_buf[0]);

	print("\n\rKONIEC!");
    cleanup_platform();
    return 0;
}
